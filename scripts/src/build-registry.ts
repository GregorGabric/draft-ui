import { dirname, join } from 'path'

import { findUpSync } from 'find-up'
import { outputFile, remove } from 'fs-extra'
import { Project } from 'ts-morph'

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const root = dirname(findUpSync('pnpm-lock.yaml')!)
process.chdir(join(root, 'apps', 'storybook'))

const project = new Project({})
project.addSourceFilesAtPaths('src/**/examples/*.tsx')

const sourceFiles = project.getSourceFiles()

// ----------------------------------------------------------------------------
// Build __registry__/index.tsx.
// ----------------------------------------------------------------------------

const buildRegistryIndex = async () => {
  let index = `/* eslint-disable prettier/prettier */
    // @ts-nocheck
    // This file is autogenerated by scripts/build-registry.ts
    // Do not edit this file directly.
    import * as React from "react"
    
    export const Index: Record<string, any> = {
    `

  for (const file of sourceFiles) {
    const component = file.getDirectory().getParent()?.getBaseName()
    if (!component) {
      console.log('Component baseName not found')
      break
    }
    const example = file.getBaseNameWithoutExtension()
    if (!example) {
      console.log(`Variant not found for: ${component}`)
      break
    }

    index += `  "${component}": {`

    index += `
        "${example}": {
          name: "${component}",
          example: "${example}",
          component: React.lazy(() => import("@/registry/${component}/${example}")),
          file: "registry/${component}/${example}.tsx"
        },`

    index += `
      },`
  }

  index += `
      }
    `
  const outPath = join(root, 'apps', 'docs', '__registry__', 'index.tsx')
  await remove(outPath)
  await outputFile(outPath, index)
}

// ----------------------------------------------------------------------------
// Build registry/[component]/[variant].tsx.
// ----------------------------------------------------------------------------

const copyDemoComponents = async () => {
  for (const file of sourceFiles) {
    const component = file.getDirectory().getParent()?.getBaseName()
    if (!component) {
      console.log('Component baseName not found')
      break
    }
    const variant = file.getBaseNameWithoutExtension()
    if (!variant) {
      console.log(`Variant not found for: ${component}`)
      break
    }

    const fileContents = file.getText()
    const registryDir = join(root, 'apps', 'docs', 'registry')
    const newPath = join(registryDir, `${component}`, `${variant}.tsx`)

    await remove(registryDir)
    await outputFile(newPath, fileContents.replace(/\n$/, ''))
  }
}

// ----------------------------------------------------------------------------
// Run
// ----------------------------------------------------------------------------

buildRegistryIndex().catch((err) => {
  console.error(err.message)
  process.exit(1)
})

copyDemoComponents().catch((err) => {
  console.error(err.message)
  process.exit(1)
})

console.log('âœ… Done!')
